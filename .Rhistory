#getwd()
train <- read.csv("pml-training.csv", header = TRUE)
test <- read.csv("pml-testing.csv", header = TRUE)
View(train)
dim(train)
dim(test)
NA_Data <- round(colMeans(is.na(train)), 3)
View(NA_Data)
Complete_Col <- which(NA_Data == 0)[-1]
train <- train[ ,Complete_Col]
test <- test[ ,Complete_Col]
View(train)
train <- train[ , -(1:5)]
test <- test[ , -(1:5)]
View(train)
library(caret)
set.seed(1234)
split_Train <- createDataPartition(y = train$classe, p = 0.7, list= FALSE)
train_Train <- train[split_Train,]
train_Validate <- train[-split_Train,]
dim(train)
dim(train_Train)
dim(train_Validate)
library(randomForest)
rf_Control <- trainControl(method = "cv", number = 3, verboseIter = FALSE)
library(randomForest)
rf_Control <- trainControl(method = "cv", number = 3, verboseIter = FALSE)
library(e1071)
library(randomForest)
rf_Control <- trainControl(method = "cv", number = 3, verboseIter = FALSE)
library(randomForest)
rf_Model <- randomForest(classe ~ ., data = train_Train, method = "rf", trControl=trainControl(method = "cv", number = 4), prox = TRUE)
train <- train[ , -(1:5)]
test <- test[ , -(1:5)]
for(t in 1:(length(train)-1)){
train[ ,t] <- as.numeric(train[ ,t])
test[ ,t] <- as.numeric(test[ ,t])
}
View(train)
library(caret)
set.seed(1234)
split_Train <- createDataPartition(y = train$classe, p = 0.7, list= FALSE)
train_Train <- train[split_Train,]
train_Validate <- train[-split_Train,]
dim(train)
dim(train_Train)
dim(train_Validate)
library(randomForest)
rf_Model <- randomForest(classe ~ ., data = train_Train, method = "rf", trControl=trainControl(method = "cv", number = 4), prox = TRUE)
rf_Model
rf_Predict <- predict(rf_Model, train_Validate)
confusionMatrix(rf_Predict, train_Validate$classe)
rf_Predict_Test <- predict(rf_Model, test)
rf_Predict_Test
rf_Predict_Test <- predict(rf_Model, test)
rf_Predict_Test
View(train)
View(train_Validate)
test <- read.csv("pml-testing.csv", header = TRUE)
rf_Predict_Test <- predict(rf_Model, test)
rf_Predict_Test
rf_Predict_Test <- predict(rf_Model, newdata = test)
rf_Predict_Test
#getwd()
train <- read.csv("pml-training.csv", header = TRUE)
test <- read.csv("pml-testing.csv", header = TRUE)
NA_Data <- round(colMeans(is.na(train)), 3)
View(NA_Data)
Complete_Col <- which(NA_Data == 0)[-1]
train <- train[ ,Complete_Col]
test <- test[ ,Complete_Col]
View(train)
train <- train[ , -(1:5)]
test <- test[ , -(1:5)]
for(t in 1:(length(train)-1)){
train[ ,t] <- as.numeric(train[ ,t])
test[ ,t] <- as.numeric(test[ ,t])
}
View(train)
library(caret)
set.seed(1234)
split_Train <- createDataPartition(y = train$classe, p = 0.7, list= FALSE)
train_Train <- train[split_Train,]
train_Validate <- train[-split_Train,]
dim(train)
dim(train_Train)
dim(train_Validate)
rf_Predict_Test <- predict(rf_Model, newdata = test)
rf_Predict_Test
View(test)
NA_Data <- round(colMeans(is.na(train)), 3)
View(NA_Data)
Complete_Col <- which(NA_Data == 0)[-1]
train <- train[ ,Complete_Col]
test <- test[ ,Complete_Col]
View(train)
train <- train[ , -(1:5)]
test <- test[ , -(1:5)]
for(t in 1:(length(train)-1)){
train[ ,t] <- as.numeric(train[ ,t])
test[ ,t] <- as.numeric(test[ ,t])
}
View(train)
View(test)
test <- test[ ,Complete_Col]
library(e1071)
gbm_Model <- train(classe ~ ., data = train_Train, method = "gbm", trControl = trainControl(method = "repeatedcv", number = 3, repeats = 1), verbose = FALSE)
gbm_Model
gbm_Predict <- predict(gbm_Model, train_Validate)
confusionMatrix(gbm_Predict, train_Validate$classe)
rf_Predict_Test <- predict(rf_Model, newdata = test)
rf_Predict_Test <- predict(gbm_Model, newdata = test)
rf_Predict_Test <- predict(gbm_Model, data = test)
rf_Predict_Test
#getwd()
train <- read.csv("pml-training.csv", header = TRUE)
test <- read.csv("pml-testing.csv", header = TRUE)
#getwd()
train <- read.csv("pml-training.csv", header = TRUE, na.strings = c("","NA", "#DIV/0!"))
test <- read.csv("pml-testing.csv", header = TRUE, na.strings = c("","NA", "#DIV/0!"))
View(train)
View(test)
dim(train)
dim(test)
NA_Data <- round(colMeans(is.na(train)), 3)
View(NA_Data)
Complete_Col <- which(NA_Data == 0)[-1]
train <- train[ ,Complete_Col]
test <- test[ ,Complete_Col]
View(train)
View(test)
train <- train[ , -(1:6)]
test <- test[ , -(1:6)]
for(t in 1:(length(train)-1))
{
train[ ,t] <- as.numeric(train[ ,t])
test[ ,t] <- as.numeric(test[ ,t])
}
View(train)
View(test)
View(train)
View(test)
dim(train)
dim(test)
library(caret)
split_Train <- createDataPartition(y = train$classe, p = 0.7, list= FALSE)
train_Train <- train[split_Train,]
train_Validate <- train[-split_Train,]
dim(train)
dim(test)
dim(train_Train)
dim(train_Validate)
library(e1071)
gbm_Model <- train(classe ~ ., data = train_Train, method = "gbm", trControl = trainControl(method = "repeatedcv", number = 3, repeats = 1), verbose = FALSE)
gbm_Model
gbm_Predict <- predict(gbm_Model, train_Validate)
confusionMatrix(gbm_Predict, train_Validate$classe)
library(randomForest)
rf_Model <- randomForest(classe ~ ., data = train_Train, method = "rf", trControl=trainControl(method = "cv", number = 4), prox = TRUE)
rf_Model
rf_Predict <- predict(rf_Model, train_Validate)
confusionMatrix(rf_Predict, train_Validate$classe)
rf_Predict_Test <- predict(rf_Model, data = test)
rf_Predict_Test
View(test)
test2 <- read.csv("pml-testing.csv", header = TRUE, na.strings = c("","NA", "#DIV/0!"))
rf_Predict_Test <- predict(rf_Model, data = test2)
rf_Predict_Test
View(test2)
rf_Predict_Test <- predict(rf_Model, test)
rf_Predict_Test
